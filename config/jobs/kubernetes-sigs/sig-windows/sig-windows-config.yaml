presets:
- labels:
    preset-azure-acsengine: "true"
  env:
  - name: AZURE_CREDENTIALS
    value: /etc/azure-cred/credentials
  - name: AZURE_SSH_PUBLIC_KEY_FILE
    value: /etc/azure-ssh/azure-ssh-pub
  - name: CLOUD_CONFIG
    value: random 
  - name: AZ_STORAGE_CONTAINER_NAME
    value: mystoragecontainer
  - name: REGISTRY
    value: gcr.io/win-e2e-test/win-e2e-hyperkube
  - name: WIN_BUILD
    value: https://raw.githubusercontent.com/Azure/acs-engine/master/scripts/build-windows-k8s.sh
  - name: KUBE_TEST_REPO_LIST_DOWNLOAD_LOCATION
    value: https://raw.githubusercontent.com/e2e-win/e2e-win-prow-deployment/master/repo-list
  volumes:
  - name: azure-cred
    secret:
      secretName: azure-cred
  - name: azure-ssh
    secret:
      secretName: azure-ssh
  volumeMounts:
  - name: azure-cred
    mountPath: /etc/azure-cred
    readOnly: true
  - name: azure-ssh
    mountPath: /etc/azure-ssh
    readOnly: true


periodics:
- interval: 8h
  name: ci-kubernetes-e2e-win-1-13
  labels:
    preset-service-account: "true"
    preset-azure-acsengine: "true"
    preset-k8s-ssh: "true"
  spec:
    containers:
    - image: gcr.io/k8s-testimages/kubekins-e2e:v20190110-49573aea5-master
      args:
      - "--job=$(JOB_NAME)"
      - "--root=/go/src"
      - "--repo=k8s.io/kubernetes=master"
      - "--upload=gs://kubernetes-jenkins/logs/"
      - "--timeout=360"
      - "--scenario=kubernetes_e2e"
      - --
      - "--test=true"
      - "--up=true"
      - "--down=true"
      - "--deployment=acsengine"
      - "--provider=skeleton"
      - "--build=bazel"
      - "--acsengine-admin-username=azureuser"
      - "--acsengine-admin-password=AdminPassw0rd"
      - "--acsengine-creds=$AZURE_CREDENTIALS"
      - "--acsengine-download-url=https://k8stestinfrabinaries.blob.core.windows.net/acsengine/acs-engine-dirty.tar.gz"
      - "--acsengine-public-key=$AZURE_SSH_PUBLIC_KEY_FILE"
      - "--acsengine-winZipBuildScript=$WIN_BUILD"
      - "--acsengine-orchestratorRelease=1.13"
      - "--acsengine-win-binaries-url=https://k8stestinfrabinaries.blob.core.windows.net/k8swin/v1.13.0-beta.0-1int.zip"
      - "--acsengine-hyperkube-url=k8s.gcr.io/hyperkube-amd64:v1.13.0-beta.0"
      - "--acsengine-agentpoolcount=3"
      - "--test_args=--ginkgo.focus=\\[Conformance\\]|\\[NodeConformance\\] --ginkgo.skip=\\[k8s.io\\].Container.Runtime.blackbox.test.when.running.a.container.with.a.new.image.should.be.able.to.pull.from.private.registry.with.secret.\\[NodeConformance\\]|\\[k8s.io\\].Container.Runtime.blackbox.test.when.running.a.container.with.a.new.image.should.be.able.to.pull.image.from.docker.hub.\\[NodeConformance\\]|\\[k8s.io\\].Container.Runtime.blackbox.test.when.running.a.container.with.a.new.image.should.be.able.to.pull.image.from.gcr.io.\\[NodeConformance\\]|\\[k8s.io\\].Container.Runtime.blackbox.test.when.running.a.container.with.a.new.image.should.not.be.able.to.pull.from.private.registry.without.secret.\\[NodeConformance\\]|\\[k8s.io\\].Container.Runtime.blackbox.test.when.running.a.container.with.a.new.image.should.not.be.able.to.pull.image.from.invalid.registry.\\[NodeConformance\\]|\\[k8s.io\\].Container.Runtime.blackbox.test.when.running.a.container.with.a.new.image.should.not.be.able.to.pull.non-existing.image.from.gcr.io.\\[NodeConformance\\]|\\[k8s.io\\].Container.Runtime.blackbox.test.when.starting.a.container.that.exits.should.report.termination.message.as.empty.when.pod.succeeds.and.TerminationMessagePolicy.FallbackToLogOnError.is.set.\\[NodeConformance\\]|\\[k8s.io\\].Container.Runtime.blackbox.test.when.starting.a.container.that.exits.should.report.termination.message.from.file.when.pod.succeeds.and.TerminationMessagePolicy.FallbackToLogOnError.is.set.\\[NodeConformance\\]|\\[k8s.io\\].Container.Runtime.blackbox.test.when.starting.a.container.that.exits.should.report.termination.message.from.log.output.if.TerminationMessagePolicy.FallbackToLogOnError.is.set.\\[NodeConformance\\]|\\[k8s.io\\].Container.Runtime.blackbox.test.when.starting.a.container.that.exits.should.report.termination.message.if.TerminationMessagePath.is.set.\\[NodeConformance\\]|\\[k8s.io\\].Container.Runtime.blackbox.test.when.starting.a.container.that.exits.should.report.termination.message.if.TerminationMessagePath.is.set.as.non-root.user.and.at.a.non-default.path.\\[NodeConformance\\]|\\[k8s.io\\].Container.Runtime.blackbox.test.when.starting.a.container.that.exits.should.run.with.the.expected.status.\\[NodeConformance\\]|\\[k8s.io\\].Kubelet.when.scheduling.a.busybox.Pod.with.hostAliases.should.write.entries.to./etc/hosts.\\[NodeConformance\\].\\[Conformance\\]|\\[k8s.io\\].Kubelet.when.scheduling.a.read.only.busybox.container.should.not.write.to.root.filesystem.\\[NodeConformance\\].\\[Conformance\\]|\\[k8s.io\\].KubeletManagedEtcHosts.should.test.kubelet.managed./etc/hosts.file.\\[NodeConformance\\].\\[Conformance\\]|\\[k8s.io\\].PrivilegedPod.\\[NodeConformance\\].should.enable.privileged.commands|\\[k8s.io\\].Security.Context.When.creating.a.container.with.runAsUser.should.run.the.container.with.uid.0.\\[NodeConformance\\]|\\[k8s.io\\].Security.Context.When.creating.a.container.with.runAsUser.should.run.the.container.with.uid.65534.\\[NodeConformance\\]|\\[k8s.io\\].Security.Context.When.creating.a.pod.with.privileged.should.run.the.container.as.unprivileged.when.false.\\[NodeConformance\\]|\\[k8s.io\\].Security.Context.When.creating.a.pod.with.readOnlyRootFilesystem.should.run.the.container.with.readonly.rootfs.when.readOnlyRootFilesystem=true.\\[NodeConformance\\]|\\[k8s.io\\].Security.Context.when.creating.containers.with.AllowPrivilegeEscalation.should.allow.privilege.escalation.when.not.explicitly.set.and.uid.!=.0.\\[NodeConformance\\]|\\[k8s.io\\].Security.Context.when.creating.containers.with.AllowPrivilegeEscalation.should.allow.privilege.escalation.when.true.\\[NodeConformance\\]|\\[k8s.io\\].Security.Context.when.creating.containers.with.AllowPrivilegeEscalation.should.not.allow.privilege.escalation.when.false.\\[NodeConformance\\]|\\[sig-network\\].DNS.should.provide.DNS.for.services..\\[Conformance\\]|\\[sig-network\\].DNS.should.provide.DNS.for.the.cluster..\\[Conformance\\]|\\[sig-network\\].Networking.Granular.Checks:.Pods.should.function.for.intra-pod.communication:.http.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-network\\].Networking.Granular.Checks:.Pods.should.function.for.intra-pod.communication:.udp.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-network\\].Networking.Granular.Checks:.Pods.should.function.for.node-pod.communication:.http.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-network\\].Networking.Granular.Checks:.Pods.should.function.for.node-pod.communication:.udp.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].ConfigMap.should.be.consumable.from.pods.in.volume.as.non-root.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].ConfigMap.should.be.consumable.from.pods.in.volume.with.defaultMode.set.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].ConfigMap.should.be.consumable.from.pods.in.volume.with.mappings.and.Item.mode.set.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].ConfigMap.should.be.consumable.from.pods.in.volume.with.mappings.as.non-root.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Downward.API.volume.should.set.DefaultMode.on.files.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Downward.API.volume.should.set.mode.on.item.file.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].EmptyDir.volumes.*\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].HostPath.should.give.a.volume.the.correct.mode.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Projected.configMap.should.be.consumable.from.pods.in.volume.as.non-root.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Projected.configMap.should.be.consumable.from.pods.in.volume.with.defaultMode.set.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Projected.configMap.should.be.consumable.from.pods.in.volume.with.mappings.and.Item.mode.set.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Projected.configMap.should.be.consumable.from.pods.in.volume.with.mappings.as.non-root.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Projected.secret.should.be.consumable.from.pods.in.volume.as.non-root.with.defaultMode.and.fsGroup.set.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Projected.secret.should.be.consumable.from.pods.in.volume.with.defaultMode.set.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Projected.secret.should.be.consumable.from.pods.in.volume.with.mappings.and.Item.Mode.set.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Secrets.should.be.consumable.from.pods.in.volume.as.non-root.with.defaultMode.and.fsGroup.set.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Secrets.should.be.consumable.from.pods.in.volume.with.defaultMode.set.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Secrets.should.be.consumable.from.pods.in.volume.with.mappings.and.Item.Mode.set.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Subpath.Atomic.writer.volumes.should.support.subpaths.with.configmap.pod.\\[Conformance\\]|\\[sig-storage\\].Subpath.Atomic.writer.volumes.should.support.subpaths.with.configmap.pod.with.mountPath.of.existing.file.\\[Conformance\\]|\\[sig-storage\\].Subpath.Atomic.writer.volumes.should.support.subpaths.with.downward.pod.\\[Conformance\\]|\\[sig-storage\\].Subpath.Atomic.writer.volumes.should.support.subpaths.with.projected.pod.\\[Conformance\\]|\\[sig-storage\\].Subpath.Atomic.writer.volumes.should.support.subpaths.with.secret.pod.\\[Conformance\\]|\\[sig-storage\\].Projected.downwardAPI.should.set.DefaultMode.on.files.\\[NodeConformance\\].\\[Conformance\\]|\\[sig-storage\\].Projected.downwardAPI.should.set.mode.on.item.file.\\[NodeConformance\\].\\[Conformance\\]"
      - "--timeout=340m"
